# -*- coding: utf-8 -*-
"""Prob_stat_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tLR6b_XR-UskvIZ5s9Tq91lUbolQURau

## Problem Statement:
* Develop a predictive model that determines whether a patient will be
eligible for "Target Drug" in the next 30 days, assisting physicians in making informed treatment decisions for effective and safe healthcare.
"""

# load file
from google.colab import files
uploaded = files.upload()

# importing the required files
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

!pip install xgboost

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.metrics import roc_curve, auc
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

# loading the dataset(training)
train_df=pd.read_parquet("/content/train.parquet")

# pre-processing training dataset

train_df.head()

print(train_df.info())

print(train_df.shape)

print(train_df.isnull().sum())

print(train_df.nunique())

train_df = train_df.drop_duplicates()
print(train_df.duplicated().sum())

unique_counts = train_df['Incident'].value_counts()
print(unique_counts)

"""# Developing a positive and negative model(training dataset)"""

# Positive Set
positive_set = train_df[train_df['Incident'] == 'TARGET DRUG']
positive_set = positive_set.groupby('Patient-Uid')['Date'].min().reset_index()
positive_set['Label'] = 1  # Set 'Label' to 1 for positive set

# Negative Set
negative_set = train_df[~train_df['Patient-Uid'].isin(positive_set['Patient-Uid'])]

# Balance the negative set (adjust this part to match other characteristics)
negative_set = negative_set.sample(n=len(positive_set), random_state=42)

# Add 'Label' to the negative set and set it to 0
negative_set['Label'] = 0

# Define the 'prediction_date' as 30 days from today
prediction_date = pd.to_datetime('today') + pd.DateOffset(days=30)

# Calculate 'Time_diff' for the positive set
positive_set['Time_diff'] = (prediction_date - positive_set.groupby('Patient-Uid')['Date'].transform('max')).dt.days

# Calculate 'Time_diff' for the negative set
negative_set['Time_diff'] = (prediction_date - negative_set.groupby('Patient-Uid')['Date'].transform('max')).dt.days

# Concatenate positive and negative sets into a new DataFrame
new_df = pd.concat([positive_set, negative_set], ignore_index=True)

# Now, new_df contains both positive and negative examples with 'Label' and 'Time_diff'
new_df.tail()

"""## Predictive model"""

# Define the feature matrix 'X' and target variable 'y' based on the 'Label' column
X = new_df.drop(['Label','Patient-Uid','Date', 'Incident'], axis=1)
y = new_df['Label']

# Split the data into train and test sets based on the 'Label' column
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Split your data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Linear Regression model
linear_reg = LinearRegression()
linear_reg.fit(X_train, y_train)

# Predict on the test set
y_pred = linear_reg.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Linear Regression Results:")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R-squared (R2): {r2:.2f}")

# Assuming you have calculated the fpr, tpr, and thresholds
fpr, tpr, thresholds = roc_curve(y_test, y_pred)

# Calculate the AUC (Area Under the Curve)
roc_auc = auc(fpr, tpr)

# Plot the ROC curve
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, lw=2, label=f'ROC curve (AUC = {roc_auc:.3f})')
plt.plot([0, 1], [0, 1], 'k--', lw=2)
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
plt.show()

# Split your data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the XGBoost classifier
xgb_classifier = XGBClassifier()

# Train the classifier on the training data
xgb_classifier.fit(X_train, y_train)

# Make predictions on the test data
y_pred = xgb_classifier.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print("XGBoost Classifier Results:")
print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1 Score: {f1:.2f}")
print("Confusion Matrix:")
print(conf_matrix)

"""## Loading Test dataset and pre-processing it"""

# Load the test data from test.parquet
test_df = pd.read_parquet("test.parquet")

test_df

"""#  Developing a positive and negative model (Test dataset)"""

# Positive Set
positive_setT = test_df[test_df['Incident'] == 'TARGET DRUG']
positive_setT = positive_set.groupby('Patient-Uid')['Date'].min().reset_index()
positive_setT['Label'] = 1  # Set 'Label' to 1 for positive set

# Negative Set
negative_setT = test_df[~test_df['Patient-Uid'].isin(positive_set['Patient-Uid'])]

# Balance the negative set (adjust this part to match other characteristics)
negative_setT = negative_setT.sample(n=len(positive_set), random_state=42)

# Add 'Label' to the negative set and set it to 0
negative_setT['Label'] = 0

new_df1 = pd.concat([positive_set, negative_set])
new_df1.head()

# Define the 'prediction_date' as 30 days from today
prediction_dateT = pd.to_datetime('today') + pd.DateOffset(days=30)

# Calculate 'Time_diff' for the positive set
positive_setT['Time_diff'] = (prediction_dateT - positive_setT.groupby('Patient-Uid')['Date'].transform('max')).dt.days

# Calculate 'Time_diff' for the negative set
negative_setT['Time_diff'] = (prediction_dateT - negative_setT.groupby('Patient-Uid')['Date'].transform('max')).dt.days

new_df1 = pd.concat([positive_setT, negative_setT])

"""# Final generated predicted model in .csv file"""

# To create final submission file

test_data_pred = xgb_classifier.predict(new_df1[['Time_diff']])
final_submission = pd.DataFrame({'Patient-Uid': new_df1['Patient-Uid'], 'Prediction': test_data_pred})
final_submission.to_csv('Final_submission.csv', index=False)